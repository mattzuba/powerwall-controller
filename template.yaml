AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Powerwall Controller

Parameters:
  TimeZone:
    Description: Timezone to use
    Type: String
    Default: UTC
  Debug:
    Description: Debug level (debug npm package)
    Type: String
    Default: "*:info"

Globals:
  Function:
    Timeout: 30
    CodeUri: ./src/api
    Runtime: nodejs14.x
    AutoPublishAlias: live
    Environment:
      Variables:
        TZ: !Ref TimeZone
        DEBUG: !Ref Debug

Resources:
  SettingsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Settings
      PrimaryKey:
        Name: Key
        Type: String
  NotificationTopic:
    Type: AWS::SNS::Topic
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.login
      Events:
        Api:
          Type: HttpApi
          Properties:
            Method: POST
            Path: /login
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SettingsTable
  SettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.settings
      Environment:
        Variables:
          SNS_TOPIC: !Ref NotificationTopic
      Events:
        Api:
          Type: HttpApi
          Properties:
            Method: ANY
            Path: /settings/{setting}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
        - SNSCrudPolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
  AdjustFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.adjuster
      Environment:
        Variables:
          SNS_TOPIC: !Ref NotificationTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Name: QuarterHourSchedule
            Schedule: rate(15 minutes)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
        - SNSCrudPolicy:
            TopicName: !GetAtt NotificationTopic.TopicName

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: ON
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      AliasAttributes:
        - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED

Outputs:
  BaseApi:
    Description: "API Gateway Endpoint Base URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"